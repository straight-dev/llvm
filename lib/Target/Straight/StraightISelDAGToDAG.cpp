//===-- StraightISelDAGToDAG.cpp - A dag to dag inst selector for Straight ----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines a DAG pattern matching instruction selector for Straight,
// converting from a legalized dag to a Straight dag.
//
//===----------------------------------------------------------------------===//

#include "Straight.h"
#include "StraightRegisterInfo.h"
#include "StraightSubtarget.h"
#include "StraightTargetMachine.h"
#include "llvm/CodeGen/FunctionLoweringInfo.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/IntrinsicInst.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/Endian.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Target/TargetMachine.h"

#include <optional>

using namespace llvm;

#define DEBUG_TYPE "straight-isel"

// Instruction Selector Implementation
namespace {

class StraightDAGToDAGISel : public SelectionDAGISel {
  MVT ptrVT;
public:
  explicit StraightDAGToDAGISel(StraightTargetMachine &TM) : SelectionDAGISel(TM) {}

  StringRef getPassName() const override {
    return "Straight DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override {
    ptrVT = MF.getSubtarget<StraightSubtarget>().getPtrVT();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

private:
// Include the pieces autogenerated from the target description.
#include "StraightGenDAGISel.inc"

  void Select(SDNode *N) override;

  // Complex Pattern for address selection.
  bool SelectAddrFI(SDValue Addr, SDValue &Offset);
};
} // namespace

// ComplexPattern used on Straight Load/Store instructions
bool StraightDAGToDAGISel::SelectAddrFI(SDValue Addr, SDValue &Base) {
  // copied from RISC-V
  if (auto FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), ptrVT);
    return true;
  }
  return false;
}

void StraightDAGToDAGISel::Select(SDNode *Node) {
  // Dump information about the Node being selected
  LLVM_DEBUG(dbgs() << "Selecting: "; Node->dump(CurDAG); dbgs() << '\n');

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()){
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << '\n');
    return;
  }
  // copied from RISC-V
  if (Node->getOpcode() == ISD::FrameIndex) {
    SDLoc DL(Node);
    SDValue Imm = CurDAG->getTargetConstant(0, DL, ptrVT);
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    EVT VT = Node->getValueType(0);
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
    ReplaceNode(Node, CurDAG->getMachineNode(Straight::ADDi_64, DL, VT, TFI, Imm));
    return;
  }

  // Select the default instruction
  SelectCode(Node);
}


FunctionPass *llvm::createStraightISelDag(StraightTargetMachine &TM) {
  return new StraightDAGToDAGISel(TM);
}


